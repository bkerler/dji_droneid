/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(016d4ede7bb4151a0742f95f1a071c17)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/droneid/utils.h>
// pydoc.h is automatically generated in the build directory
#include <utils_pydoc.h>

void bind_utils(py::module& m)
{

    using utils = ::gr::droneid::utils;


    py::class_<utils, std::shared_ptr<utils>>(m, "utils", D(utils))

        .def(py::init<>(), D(utils, utils, 0))
        .def(py::init<gr::droneid::utils const&>(), py::arg("arg0"), D(utils, utils, 1))


        .def_static("get_long_cp_len",
                    &utils::get_long_cp_len,
                    py::arg("sample_rate"),
                    D(utils, get_long_cp_len))


        .def_static("get_short_cp_len",
                    &utils::get_short_cp_len,
                    py::arg("sample_rate"),
                    D(utils, get_short_cp_len))


        .def_static("get_fft_size",
                    &utils::get_fft_size,
                    py::arg("sample_rate"),
                    D(utils, get_fft_size))


        .def_static("create_zc_sequence",
                    &utils::create_zc_sequence,
                    py::arg("sample_rate"),
                    py::arg("root"),
                    D(utils, create_zc_sequence))

        ;
}
