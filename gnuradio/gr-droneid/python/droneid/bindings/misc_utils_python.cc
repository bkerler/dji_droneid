/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(misc_utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(2745458148c019200ed594e41dea48b1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/droneid/misc_utils.h>
// pydoc.h is automatically generated in the build directory
#include <misc_utils_pydoc.h>

void bind_misc_utils(py::module& m)
{

    using misc_utils = ::gr::droneid::misc_utils;


    py::class_<misc_utils, std::shared_ptr<misc_utils>>(m, "misc_utils", D(misc_utils))

        .def(py::init<>(), D(misc_utils, misc_utils, 0))
        .def(py::init<gr::droneid::misc_utils const&>(),
             py::arg("arg0"),
             D(misc_utils, misc_utils, 1))


        .def_static("get_long_cp_len",
                    &misc_utils::get_long_cp_len,
                    py::arg("sample_rate"),
                    D(misc_utils, get_long_cp_len))


        .def_static("get_short_cp_len",
                    &misc_utils::get_short_cp_len,
                    py::arg("sample_rate"),
                    D(misc_utils, get_short_cp_len))


        .def_static("get_fft_size",
                    &misc_utils::get_fft_size,
                    py::arg("sample_rate"),
                    D(misc_utils, get_fft_size))


        .def_static("create_gaussian_noise",
                    &misc_utils::create_gaussian_noise,
                    py::arg("sample_count"),
                    D(misc_utils, create_gaussian_noise))


        .def_static("create_zc_sequence",
                    &misc_utils::create_zc_sequence,
                    py::arg("sample_rate"),
                    py::arg("root"),
                    D(misc_utils, create_zc_sequence))


        .def_static("conj", &misc_utils::conj, py::arg("input"), D(misc_utils, conj))


        .def_static("mean",
                    &misc_utils::mean,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(misc_utils, mean))


        .def_static("var",
                    &misc_utils::var,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(misc_utils, var))


        .def_static("var_no_mean",
                    &misc_utils::var_no_mean,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(misc_utils, var_no_mean))


        .def_static("write",
                    &misc_utils::write,
                    py::arg("path"),
                    py::arg("element"),
                    py::arg("element_size"),
                    py::arg("element_count"),
                    D(misc_utils, write))


        .def_static("write_vec",
                    &misc_utils::write_vec,
                    py::arg("path"),
                    py::arg("elements"),
                    D(misc_utils, write_vec))


        .def_static("write_samples",
                    &misc_utils::write_samples,
                    py::arg("path"),
                    py::arg("samples"),
                    py::arg("element_count"),
                    D(misc_utils, write_samples))


        .def_static("write_samples_vec",
                    &misc_utils::write_samples_vec,
                    py::arg("path"),
                    py::arg("samples"),
                    D(misc_utils, write_samples_vec))


        .def_static("read_samples",
                    &misc_utils::read_samples,
                    py::arg("file_path"),
                    py::arg("offset"),
                    py::arg("total_samples"),
                    D(misc_utils, read_samples))


        .def_static("get_data_carrier_indices",
                    &misc_utils::get_data_carrier_indices,
                    py::arg("fft_size"),
                    D(misc_utils, get_data_carrier_indices))


        .def_static("extract_data_carriers",
                    &misc_utils::extract_data_carriers,
                    py::arg("symbol"),
                    py::arg("fft_size"),
                    D(misc_utils, extract_data_carriers))


        .def_static("bit_vec_to_string",
                    &misc_utils::bit_vec_to_string,
                    py::arg("bit_vec"),
                    D(misc_utils, bit_vec_to_string))


        .def_static("print_bits",
                    &misc_utils::print_bits,
                    py::arg("bits"),
                    D(misc_utils, print_bits))


        .def_static("find_zc_seq_start_idx",
                    &misc_utils::find_zc_seq_start_idx,
                    py::arg("samples"),
                    py::arg("sample_rate"),
                    D(misc_utils, find_zc_seq_start_idx))


        .def_static("radians_to_hz",
                    &misc_utils::radians_to_hz,
                    py::arg("radians"),
                    py::arg("sample_rate"),
                    D(misc_utils, radians_to_hz))


        .def_static("hz_to_radians",
                    &misc_utils::hz_to_radians,
                    py::arg("frequency"),
                    py::arg("sample_rate"),
                    D(misc_utils, hz_to_radians))


        .def_static("get_cyclic_prefix_schedule",
                    &misc_utils::get_cyclic_prefix_schedule,
                    py::arg("sample_rate"),
                    D(misc_utils, get_cyclic_prefix_schedule))


        .def_static("extract_ofdm_symbol_samples",
                    &misc_utils::extract_ofdm_symbol_samples,
                    py::arg("samples"),
                    py::arg("sample_rate"),
                    py::arg("offset"),
                    D(misc_utils, extract_ofdm_symbol_samples))


        .def_static("calculate_channel",
                    &misc_utils::calculate_channel,
                    py::arg("symbol"),
                    py::arg("sample_rate"),
                    py::arg("symbol_idx"),
                    D(misc_utils, calculate_channel))


        .def_static("qpsk_to_bits",
                    &misc_utils::qpsk_to_bits,
                    py::arg("samples"),
                    D(misc_utils, qpsk_to_bits))


        .def_static("angle", &misc_utils::angle, py::arg("samples"), D(misc_utils, angle))


        .def_static("abs_squared",
                    &misc_utils::abs_squared,
                    py::arg("samples"),
                    D(misc_utils, abs_squared))

        ;
}
