/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(2b797448fb8ea6ebcdf63ff38c33eb3c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dji_droneid/utils.h>
// pydoc.h is automatically generated in the build directory
#include <utils_pydoc.h>

void bind_utils(py::module& m)
{

    using utils = ::gr::dji_droneid::utils;


    py::class_<utils, std::shared_ptr<utils>>(m, "utils", D(utils))

        .def(py::init<>(), D(utils, utils, 0))
        .def(py::init<gr::dji_droneid::utils const&>(),
             py::arg("arg0"),
             D(utils, utils, 1))


        .def_static("get_fft_size",
                    &utils::get_fft_size,
                    py::arg("sample_rate"),
                    D(utils, get_fft_size))


        .def_static("get_sample_rate",
                    &utils::get_sample_rate,
                    py::arg("fft_size"),
                    D(utils, get_sample_rate))


        .def_static("get_data_carrier_indices",
                    &utils::get_data_carrier_indices,
                    py::arg("sample_rate"),
                    D(utils, get_data_carrier_indices))


        .def_static("zadoff_chu",
                    &utils::zadoff_chu,
                    py::arg("root"),
                    py::arg("length"),
                    D(utils, zadoff_chu))


        .def_static("create_zc",
                    &utils::create_zc,
                    py::arg("fft_size"),
                    py::arg("symbol_idx"),
                    D(utils, create_zc))


        .def_static("get_cyclic_prefix_lengths",
                    &utils::get_cyclic_prefix_lengths,
                    py::arg("sample_rate"),
                    D(utils, get_cyclic_prefix_lengths))


        .def_static("mean_fast",
                    &utils::mean_fast,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(utils, mean_fast))


        .def_static("variance_no_mean",
                    &utils::variance_no_mean,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(utils, variance_no_mean))


        .def_static("variance",
                    &utils::variance,
                    py::arg("samples"),
                    py::arg("sample_count"),
                    D(utils, variance))


        .def_static("variance_vector",
                    &utils::variance_vector,
                    py::arg("samples"),
                    D(utils, variance_vector))


        .def_static(
            "conj_vector", &utils::conj_vector, py::arg("samples"), D(utils, conj_vector))

        ;
}
